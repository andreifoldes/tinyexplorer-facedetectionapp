name: Build Windows

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Node dependencies
      run: npm ci

    - name: Generate valid Windows ICO from PNG (pad to square, multi-size)
      run: |
        set -e
        mkdir -p resources
        # Pick source PNG (prefer declared 1024x1024 if present)
        SRC="resources/icons/1024x1024.png"
        if [ ! -f "$SRC" ]; then
          SRC="graphics/icons/dragon-1024.png"
        fi
        if [ ! -f "$SRC" ]; then
          echo "No suitable PNG found at resources/icons/1024x1024.png or graphics/icons/dragon-1024.png" >&2
          exit 1
        fi
        echo "Using source PNG: $SRC"
        # Ensure ImageMagick is available
        if command -v magick >/dev/null 2>&1; then
          echo "Found ImageMagick (magick)"
          # Pad to square and generate multi-resolution ICO (includes 256x256)
          magick convert "$SRC" -alpha on -background none -gravity center -resize 1024x1024^ -extent 1024x1024 \
            -define icon:auto-resize=256,128,64,48,32,16 resources/icon.ico
          echo "Generated ICO at resources/icon.ico"
        else
          echo "ImageMagick not found. Attempting png-to-ico as fallback (requires square PNG)."
          npx --yes png-to-ico "$SRC" > resources/icon.ico
        fi
      shell: bash
    - name: Build Python bundle
      run: npm run python-build
      env:
        RETINAFACE_PYTHON: python
        PIP_DISABLE_PIP_VERSION_CHECK: '1'

    - name: Build React app
      run: npx craco build
      env:
        NODE_OPTIONS: "--openssl-legacy-provider"
        CI: false
        GENERATE_SOURCEMAP: false

    - name: Build Electron main process
      run: |
        npx tsc -p tsconfig.electronMain.json
        npx electron-builder --win --x64 --publish=never
      env:
        ELECTRON_BUILDER_CACHE: ${{ runner.temp }}\electron-builder-cache
        PYTHON: python

    - name: List build artifacts
      run: dir dist\ || echo "No dist directory"
      shell: cmd

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
        if-no-files-found: warn