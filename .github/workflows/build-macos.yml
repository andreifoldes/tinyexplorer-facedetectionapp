name: Build macOS

on:
  workflow_dispatch:
  push:

jobs:
  build:
    # Matrix for native builds on both Intel (macos-13) and Apple Silicon (macos-14+)
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            arch: x64
          - runner: macos-14
            arch: arm64
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30

    env:
      ARCH: ${{ matrix.arch }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Force expose python3.10 & set build env vars
      run: |
        set -e
        echo "Python at $(which python)"
        python --version
        # Create local bin with python3.10 alias if missing
        if ! command -v python3.10 >/dev/null 2>&1; then
          mkdir -p "$GITHUB_WORKSPACE/bin"
          ln -s "$(which python)" "$GITHUB_WORKSPACE/bin/python3.10"
          echo "$GITHUB_WORKSPACE/bin" >> "$GITHUB_PATH"
          echo "Created python3.10 alias in $GITHUB_WORKSPACE/bin";
        fi
        echo "BUNDLED_PYTHON_310=$(which python)" >> $GITHUB_ENV
        echo "RETINAFACE_PYTHON=$(which python)" >> $GITHUB_ENV
        echo "PYTHON_FOR_RETINAFACE=$(which python)" >> $GITHUB_ENV

    - name: Install Node dependencies
      run: npm ci

    - name: Build Python bundle
      run: npm run python-build
      env:
        RETINAFACE_PYTHON: ${RETINAFACE_PYTHON}
        BUNDLED_PYTHON_310: ${BUNDLED_PYTHON_310}
        PIP_DISABLE_PIP_VERSION_CHECK: '1'

    - name: Verify Python modules
      run: npm run python-verify
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: '1'

    - name: Build React app
      run: |
        # Verify craco is installed locally
        npx craco --version || echo "craco version check failed"
        # Use the npm script which already sets NODE_OPTIONS and flags
        npm run react-build
      env:
        CI: false
        GENERATE_SOURCEMAP: false

    - name: Build Electron main process
      run: |
        npx tsc -p tsconfig.electronMain.json
        # Build architecture-specific zip (skip dmg for CI reliability)
        if [ "$ARCH" = "x64" ]; then
          npx electron-builder --mac zip --x64 --publish=never
        else
          npx electron-builder --mac zip --arm64 --publish=never
        fi
      env:
        ELECTRON_BUILDER_CACHE: ${{ runner.temp }}/electron-builder-cache
        PYTHON: python3

    - name: List build artifacts
      run: ls -la dist/ || echo "No dist directory"

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}
        path: |
            dist/*.zip
            dist/*.app
        if-no-files-found: warn